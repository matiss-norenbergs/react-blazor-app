<section class="page-wrapper">
    <div class="calculator-wrapper">
        <div class="name-wrapper">@Name</div>
        <div class="display">
            <span class="display-value">@GetEquation()</span>
            <span class="display-value">@($"{ValueNum:n0}")</span>
        </div>
        <div class="button-container">
            <Button ClassName="operation" Text="" Disabled />
            <Button ClassName="operation" Text="" Disabled />
            <Button ClassName="operation" Text="C" OnClick="() => OnClearClick()" />
             <Button ClassName="operation" Text="÷" OnClick="() => OnOperationBtnClick(ECalculatorOperation.Divide)" />
            <Button Text="7" OnClick="OnNumBtnClick" />
            <Button Text="8" OnClick="OnNumBtnClick" />
            <Button Text="9" OnClick="OnNumBtnClick" />
            <Button ClassName="operation" Text="x" OnClick="() => OnOperationBtnClick(ECalculatorOperation.Multiply)" />
            <Button Text="4" OnClick="OnNumBtnClick" />
            <Button Text="5" OnClick="OnNumBtnClick" />
            <Button Text="6" OnClick="OnNumBtnClick" />
            <Button ClassName="operation" Text="-" OnClick="() => OnOperationBtnClick(ECalculatorOperation.Subtract)" />
            <Button Text="1" OnClick="OnNumBtnClick" />
            <Button Text="2" OnClick="OnNumBtnClick" />
            <Button Text="3" OnClick="OnNumBtnClick" />
            <Button ClassName="operation" Text="+" OnClick="() => OnOperationBtnClick(ECalculatorOperation.Add)" />
            <Button Text="+/-" OnClick="() => OnOperationBtnClick(ECalculatorOperation.Alter)" />
            <Button Text="0" OnClick="OnNumBtnClick" />
            <Button Text="." OnClick="() => OnOperationBtnClick(ECalculatorOperation.Comma)" />
            <Button ClassName="operation" Text="=" OnClick="() => OnOperationBtnClick(ECalculatorOperation.Equals)" />
        </div>
    </div>
</section>

@code {
    [Parameter]
    public string Name { get; set; } = string.Empty;

    public string Value { get; set; } = string.Empty;

    public decimal ValueNum { get => decimal.TryParse(Value, out var valNum) ? valNum : 0; }

    public decimal Value1 { get; set; } = 0;

    public decimal Value2 { get; set; } = 0;

    public ECalculatorOperation Operation { get; set; } = ECalculatorOperation.None;

    public char OperationSymbol { get { return GetOperationSymbol(); } }

    public bool ShowEquation { get; set; } = false;

    public bool? ShowResult { get; set; } = null;

    public List<EquationHistory> CalculatorHistory = new List<EquationHistory>();

    private void OnNumBtnClick(string name)
    {
        Value += name;
    }

    private void OnOperationBtnClick(ECalculatorOperation operation)
    {
        decimal value = 0;

        switch (operation)
        {
            case ECalculatorOperation.Alter:

                break;
            case ECalculatorOperation.Comma:
                if (!Value.Contains('.'))
                    Value += ".";
                break;
            case ECalculatorOperation.Add:
            case ECalculatorOperation.Subtract:
            case ECalculatorOperation.Multiply:
            case ECalculatorOperation.Divide:
                ShowEquation = true;

                if (ShowResult.HasValue && !ShowResult.Value)
                {
                    Value2 = decimal.TryParse(Value, out value) ? value : Value1;
                    Value = CalculateResult();
                }

                Operation = operation;
                Value1 = decimal.TryParse(Value, out value) ? value : 0;

                ShowResult = false;
                Value = string.Empty;
                break;
            case ECalculatorOperation.Equals:
                Value2 = decimal.TryParse(Value, out value) ? value : Value1;
                Value = CalculateResult();
                ShowEquation = false;
                ShowResult = true;
                break;
        }
    }

    private string CalculateResult()
    {
        decimal result = 0;
        try
        {
            switch (Operation)
            {
                case ECalculatorOperation.Add:
                    result = Value1 + Value2;
                    break;
                case ECalculatorOperation.Subtract:
                    result = Value1 - Value2;
                    break;
                case ECalculatorOperation.Multiply:
                    result = Value1 * Value2;
                    break;
                case ECalculatorOperation.Divide:
                    result = Value1 / Value2;
                    break;
            }

            CalculatorHistory.Add(new EquationHistory
            {
                Num1 = Value1,
                Num2 = Value2,
                CalculatorOperation = Operation
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        return $"{result:n0}";
    }

    private void OnClearClick()
    {
        Value = string.Empty;
        Value1 = 0;
        Value2 = 0;
        ShowEquation = false;
        ShowResult = null;
    }

    private string GetEquation()
    {
        if (ShowResult == true)
            return $"{Value1} {OperationSymbol} {Value2} =";

        if (ShowEquation)
            return $"{Value1} {OperationSymbol}";

        return "";
    }

    public enum ECalculatorOperation
    {
        None = 0,
        Alter = 1,
        Comma = 2,
        Add = 3,
        Subtract = 4,
        Multiply = 5,
        Divide = 6,
        Equals = 7
    }

    private static Dictionary<ECalculatorOperation, char> CalculatorOperationSymbolCollection = new Dictionary<ECalculatorOperation, char>
    {
        { ECalculatorOperation.Add, '+' },
        { ECalculatorOperation.Subtract, '-' },
        { ECalculatorOperation.Multiply, 'x' },
        { ECalculatorOperation.Divide, '÷' }
    };

    private char GetOperationSymbol()
    {
        char oper = ' ';

        switch (Operation)
        {
            case ECalculatorOperation.Add:
            case ECalculatorOperation.Subtract:
            case ECalculatorOperation.Multiply:
            case ECalculatorOperation.Divide:
                CalculatorOperationSymbolCollection.TryGetValue(Operation, out oper);
                break;
        }

        return oper;
    }

    public class EquationHistory
    {
        public decimal Num1 { get; set; } = 0;

        public decimal Num2 { get; set; } = 0;

        public ECalculatorOperation CalculatorOperation = ECalculatorOperation.None;
    }
}